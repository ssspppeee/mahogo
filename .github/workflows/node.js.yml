# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]

jobs:

  build-frontend:

    runs-on: ubuntu-latest

    defaults: 
      run:
        working-directory: next

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'sockets/package-lock.json'
    - run: npm ci
    - run: npm run build --if-present
    # - run: npm test
  
    - name: Build container image
      run: docker build -t registry.digitalocean.com/mahogo-registry/mahogo-frontend:$(echo $GITHUB_SHA | head -c7) --build-arg backend_api_host=go.samesler.com --build-arg backend_api_port=80 --build-arg backend_socket_host=go.samesler.com --build-arg backend_socket_port=80 .

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 600

    - name: Push image to DigitalOcean Container Registry
      run: docker push registry.digitalocean.com/mahogo-registry/mahogo-frontend:$(echo $GITHUB_SHA | head -c7)

  
  build-backend:

    runs-on: ubuntu-latest

    defaults: 
      run:
        working-directory: sockets

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'sockets/package-lock.json'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test
  
    - name: Build container image
      run: docker build -t registry.digitalocean.com/mahogo-registry/mahogo-backend:$(echo $GITHUB_SHA | head -c7) .

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 600

    - name: Push image to DigitalOcean Container Registry
      run: docker push registry.digitalocean.com/mahogo-registry/mahogo-backend:$(echo $GITHUB_SHA | head -c7)

  deploy:

    needs: [build-frontend, build-backend]

    runs-on: ubuntu-latest

    defaults: 
      run:
        working-directory: sockets

    steps:
    - uses: actions/checkout@v3
    - name: Update frontend deployment file  
      run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE_COMMIT_HASH>|'${TAG}'|' $GITHUB_WORKSPACE/helm/templates/frontend-deployment.yaml
    - name: Update backend deployment file
      run: TAG=$(echo $GITHUB_SHA | head -c7) && sed -i 's|<IMAGE_COMMIT_HASH>|'${TAG}'|' $GITHUB_WORKSPACE/helm/templates/backend-deployment.yaml

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Save DigitalOcean kubeconfig with short-lived credentials
      run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 mahogo-cluster

    - name: Deploy to DigitalOcean Kubernetes
      run: kubectl apply -f $GITHUB_WORKSPACE/helm/templates

    - name: Verify deployment
      run: kubectl rollout status deployment/frontend-deployment
    - name: Verify backend deployment
      run: kubectl rollout status deployment/backend-deployment
    - name: Verify redis deployment
      run: kubectl rollout status deployment/redis-deployment
